{"name":"Bree","tagline":"A form layer for Eloquent which supports a variety of field packages","body":"\r\n![bree](https://f.cloud.github.com/assets/563996/1727115/df8b5ae0-6299-11e3-8728-a61970b58113.png)\r\n\r\n#Bree\r\n\r\nBree provides an interface to associate fieldtypes with existing Eloquent model attributes.\r\n\r\n*This project is still in an early stage and breaking changes may be made.*\r\n\r\n[![Build Status](https://travis-ci.org/packettide/bree.png)](https://travis-ci.org/packettide/bree)\r\n\r\n\r\n##Installation\r\n\r\nWith Laravel 4 and Composer\r\n\r\n1. Add `\"packettide/bree\": \"@dev\"` to your 'require' block in composer.json\r\n2. Run `composer update`\r\n3. Add `'Packettide\\Bree\\BreeServiceProvider',` to the $providers array in app/config/app.php\r\n4. Then publish all Bree assets - `php artisan bree:assets`\r\n\r\n\r\n##Basic Usage\r\n\r\nIn this section we'll cover the fundamentals of how to interact with Bree.\r\nBree functions by wrapping an existing Eloquent model and attaching field definitions to model attributes.\r\n\r\n### Defining Bree fields within routes/controllers\r\n\r\n    $book = new Bree('Book', array(\r\n\t\t\t\t'title'  => array('type' => 'Text')\r\n\t\t\t));\r\n\r\n\r\n### Defining Bree fields within Eloquent Models\r\n\r\nIn app/models/Book.php\r\n\r\n\t<?php\r\n\r\n\tclass Book extends Eloquent {\r\n\r\n\t\tpublic $breeFields = array(\r\n\t\t\t'title' => array('type' => 'Text')\r\n\t\t);\r\n\r\nNote that you can define a base field mapping in your model and override fields in a route if desired.\r\n\r\n### Display a new model\r\n\r\n\t$book = new Bree('Book');\r\n\techo $book; //this will output fields for all defined attributes\r\n\r\n### Display an existing model\r\n\r\n\t$book = new Bree('Book');\r\n\t$book->find(1);\r\n\techo $book;\r\n\r\n### Displaying a Bree field\r\n\r\nIf you don't wish to display all Bree fields from a model or would like to control the order you can use the model attributes in your views like so: \r\n\r\n\t// Route\r\n\t$book = new Bree('Book');\r\n\treturn View::make('books.create', array('book' => $book));\r\n\r\n\t// View\r\n\t{{ $book->title }} // this will output the label if available, followed by the field\r\n\t{{ $book->title->field() }} // outputs the field only\r\n\t{{ $book->title->label() }} // outputs the label only\r\n\r\n\r\n### Updating/Saving data\r\n\r\n\t$input = Input::except('_token');\r\n\t$book = new Bree('Book');\r\n\t\r\n\tforeach($input as $key => $value)\r\n\t{\t\r\n\t\t$book->$key = $value;\r\n\t}\r\n\t\r\n\t$book->save();\r\n\t\r\n\r\n\r\n## Field Definitions\r\n\r\nHere is an example of what a field definition looks like:\r\n\r\n\tarray('comments' => array('type' => 'Relate', 'label' => 'Book Comments', 'related' => 'Comment', 'title' => 'title'))\r\n\r\n* The key of this array (comments) is the name of the Eloquent attribute or relation that this field should be associated with.\r\n* **Type**: This is the name of the field type\r\n* **Label**: This is an optional attribute used to generate a corresponding HTML label for the field\r\n\r\n\r\n### Core Field Types\r\n\r\nThe following field types are available by default:\r\n\r\n* [Cell](docs/field-cell.md) - Allows inline modification of a related Bree model\r\n* [Date](docs/field-date.md) - HTML5 date input\r\n* [File](docs/field-file.md) - A single file upload field\r\n* [Relate](docs/field-relate.md) - Easily bind related models to each other\r\n* [Text](docs/field-text.md) - Simple text input\r\n* [Textarea](docs/field-textarea.md) - Simple textarea input\r\n* [Time](docs/field-time.md) - HTML5 time input\r\n\r\n\r\n## Using Other Fields\r\n\r\nAdding another field package to your project typically involves adding the dependency to your composer.json file and registering the service provider with your application.  Here are a few field packages which have more detailed instructions on their project pages:\r\n\r\n* [Colorpicker](https://github.com/packettide/bree-colorpicker)\r\n* [Wysiwyg](https://github.com/packettide/bree-wysiwyg)\r\n\r\n## Scaffolding with Bree\r\n\r\nWhile Bree is a simple layer to add over an existing Eloquent model you may find it tedious to setup the mapping of fields to attributes and model relations etcâ€¦  We have another [package called Sire](https://github.com/packettide/sire), which helps alleviate this problem while also providing a simple way to scaffold an application with Bootstrap 3.\r\n\r\n## Extending Bree\r\n\r\nBree is built to be a flexible and extensible base allowing for the creation of field types as they are required by a project.  [To learn more about creating your own field package start here](docs/extend.md).\r\n\r\n\r\n### License\r\n\r\nBree is open-sourced software licensed under the [MIT license](http://opensource.org/licenses/MIT)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}